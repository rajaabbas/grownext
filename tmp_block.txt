            return (
              <div
                key={task.id}
                className="rounded-xl border border-slate-800 bg-slate-950/60 p-3 shadow-sm transition hover:border-fuchsia-500/40"
              >
                <div className="grid grid-cols-[minmax(0,28%)_minmax(0,16%)_130px_130px_150px_minmax(0,1fr)_auto] items-start gap-3">
                  <div className="flex items-start gap-3">
                    <span className="mt-1 flex items-center gap-2 text-xs uppercase tracking-wide text-slate-400">
                      <span className={`h-2.5 w-2.5 rounded-full ${STATUS_DOT_CLASSES[task.status]}`} />
                      {STATUS_LABELS[task.status]}
                    </span>
                    <button
                      className="truncate text-left text-sm font-semibold text-white hover:text-fuchsia-300"
                      onClick={() => onSelectTask(task.id)}
                    >
                      {task.title}
                    </button>
                  </div>
                  <div className="flex items-center gap-2">
                    <Popover
                      renderButton={({ open, toggle }) => (
                        <CircleIconButton
                          label="📁"
                          title="Change project"
                          onClick={toggle}
                          active={open}
                        />
                      )}
                    >
                      {(close) => (
                        <div className="space-y-1">
                          <button
                            type="button"
                            className={optionClass(task.projectId === null)}
                            onClick={() => {
                              void onUpdateTask(task.id, { projectId: null });
                              close();
                            }}
                          >
                            Unassigned ({unassignedSummary?.openCount ?? 0})
                          </button>
                          {projects.map((project) => {
                            const active = task.projectId === project.id;
                            const summary = projectSummaryLookup.get(project.id);
                            return (
                              <button
                                key={project.id}
                                type="button"
                                className={optionClass(active)}
                                onClick={() => {
                                  void onUpdateTask(task.id, { projectId: project.id });
                                  close();
                                }}
                              >
                                {project.name} ({summary?.openCount ?? 0})
                              </button>
                            );
                          })}
                        </div>
                      )}
                    </Popover>
                    <span className="text-xs text-slate-400">{projectLabel}</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <Popover
                      renderButton={({ open, toggle }) => (
                        <CircleIconButton
                          label="📅"
                          title="Change due date"
                          onClick={toggle}
                          active={open}
                        />
                      )}
                    >
                      {(close) => (
                        <div className="space-y-2">
                          <label className="text-xs uppercase tracking-wide text-slate-500">Due date</label>
                          <input
                            type="date"
                            className="w-full rounded-md border border-slate-700 bg-slate-900 px-3 py-2 text-sm text-slate-200 focus:border-fuchsia-500 focus:outline-none"
                            value={task.dueDate ? task.dueDate.slice(0, 10) : ""}
                            onChange={async (event) => {
                              await onUpdateTask(task.id, {
                                dueDate: event.target.value ? event.target.value : null
                              });
                              close();
                            }}
                          />
                          {task.dueDate ? (
                            <button
                              type="button"
                              className="w-full rounded-md border border-slate-700 px-3 py-2 text-xs text-slate-300 transition hover:border-red-500 hover:text-red-300"
                              onClick={async () => {
                                await onUpdateTask(task.id, { dueDate: null });
                                close();
                              }}
                            >
                              Clear due date
                            </button>
                          ) : null}
                        </div>
                      )}
                    </Popover>
                    <span className={`text-xs ${dueClass}`}>{dueDateLabel}</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <Popover
                      renderButton={({ open, toggle }) => (
                        <CircleIconButton
                          label="!"
                          title="Change priority"
                          onClick={toggle}
                          active={open}
                        />
                      )}
                    >
                      {(close) => (
                        <div className="space-y-1">
                          {Object.entries(PRIORITY_LABELS).map(([value, label]) => {
                            const active = task.priority === value;
                            return (
                              <button
                                key={value}
                                type="button"
                                className={optionClass(active)}
                                onClick={async () => {
                                  await onUpdateTask(task.id, { priority: value as TaskPriority });
                                  close();
                                }}
                              >
                                {label}
                              </button>
                            );
                          })}
                        </div>
                      )}
                    </Popover>
                    <span className="text-xs text-slate-400">{priorityLabel}</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <Popover
                      renderButton={({ open, toggle }) => (
                        <CircleIconButton
                          label="👁"
                          title="Change visibility"
                          onClick={toggle}
                          active={open}
                        />
                      )}
                    >
                      {(close) => (
                        <div className="space-y-1">
                          {TASK_VISIBILITY_OPTIONS.map((option) => {
                            const active = task.visibility === option.value;
                            return (
                              <button
                                key={option.value}
                                type="button"
                                className={optionClass(active)}
                                onClick={async () => {
                                  await onUpdateTask(task.id, { visibility: option.value });
                                  close();
                                }}
                              >
                                {option.label}
                              </button>
                            );
                          })}
                        </div>
                      )}
                    </Popover>
                    <span className="text-xs text-slate-400">{visibilityLabel}</span>
                  </div>
                  <div className="flex flex-wrap items-center gap-2">
                    {collaboratorEntries.length === 0 ? (
                      <span className="text-xs text-slate-500">No collaborators.</span>
                    ) : (
                      collaboratorEntries.map(({ id, user }) => {
                        const removable = permissions.canManage || id === currentUserId;
                        return (
                          <AvatarCircle
                            key={id}
                            user={user}
                            fallback={id}
                            onRemove={removable ? () => void onRemoveCollaborator(task.id, id) : undefined}
                          />
                        );
                      })
                    )}
                    <Popover
                      renderButton={({ open, toggle }) => (
                        <CircleIconButton
                          label="+"
                          title="Add collaborator"
                          onClick={toggle}
                          active={open}
                          disabled={loadingUsers || collaboratorCandidates.length === 0}
                        />
                      )}
                    >
                      {(close) => (
                        <div className="space-y-2">
                          <p className="text-xs uppercase tracking-wide text-slate-500">Add collaborator</p>
                          {collaboratorCandidates.length === 0 ? (
                            <p className="text-xs text-slate-400">No additional collaborators available.</p>
                          ) : (
                            <div className="space-y-1">
                              {collaboratorCandidates.map((user) => (
                                <button
                                  key={user.id}
                                  type="button"
                                  className="flex w-full items-center gap-2 rounded-md px-3 py-2 text-left text-sm text-slate-200 transition hover:bg-slate-800/70"
                                  onClick={async () => {
                                    await onAddCollaborator(task.id, user.id);
                                    close();
                                  }}
                                >
                                  <AvatarCircle user={user} fallback={user.id} />
                                  <div className="flex flex-col">
                                    <span>{formatUserName(user, user.id)}</span>
                                    {user.email ? (
                                      <span className="text-xs text-slate-500">{user.email}</span>
                                    ) : null}
                                  </div>
                                </button>
                              ))}
                            </div>
                          )}
                        </div>
                      )}
                    </Popover>
                  </div>
                  <div className="flex flex-wrap justify-end gap-2">
                    {permissions.canEdit && nextStatus && (
                      <button
                        className="rounded-md border border-slate-700 px-3 py-1 text-xs text-slate-200 transition hover:border-fuchsia-500 hover:text-fuchsia-200"
                        onClick={() => onToggleStatus(task, nextStatus)}
                      >
                        Move to {STATUS_LABELS[nextStatus]}
                      </button>
                    )}
                    {permissions.canManage && (
                      <button
                        className="rounded-md border border-red-600 px-3 py-1 text-xs text-red-300 transition hover:bg-red-600/10"
                        onClick={() => onDeleteTask(task)}
                      >
                        Delete
                      </button>
                    )}
                  </div>
                </div>
              </div>
            );
          })