generator client {
  provider = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["core"]
}

model Organization {
  id          String                    @id @default(cuid())
  name        String
  slug        String?                   @unique
  createdAt   DateTime                  @default(now())
  updatedAt   DateTime                  @updatedAt
  members     OrganizationMember[]
  invitations OrganizationInvitation[]
  tenants     Tenant[]
  entitlements ProductEntitlement[]
  auditEvents AuditEvent[]
  samlConnections SamlConnection[]
  portalRolePermissions PortalRolePermission[]
  billingSubscriptions BillingSubscription[]
  billingPaymentMethods BillingPaymentMethod[]
  billingInvoices BillingInvoice[]
  billingCreditMemos BillingCreditMemo[]
  billingUsageEvents BillingUsageEvent[]
  billingUsageAggregates BillingUsageAggregate[]
  billingContacts BillingContact[]
  billingTaxIds BillingTaxId[]

  @@map("organizations")
  @@schema("core")
}

model UserProfile {
  userId      String                    @id @map("user_id") @db.Uuid
  email       String
  fullName    String                    @map("full_name")
  status      UserLifecycleStatus       @default(ACTIVE)
  createdAt   DateTime                  @default(now()) @map("created_at")
  updatedAt   DateTime                  @updatedAt @map("updated_at")
  memberships OrganizationMember[]
  invitations OrganizationInvitation[] @relation("InvitedBy")
  entitlements ProductEntitlement[]
  refreshTokens RefreshToken[]
  auditEvents AuditEvent[] @relation("AuditActor")
  samlAccounts SamlAccount[]
  initiatedBulkJobs SuperAdminBulkJob[] @relation("BulkJobInitiator")
  impersonationSessions SuperAdminImpersonationToken[] @relation("ImpersonationCreator")
  impersonationTargets SuperAdminImpersonationToken[] @relation("ImpersonationTarget")

  @@unique([email])
  @@map("user_profiles")
  @@schema("core")
}

model OrganizationMember {
  id             String            @id @default(cuid())
  organizationId String            @map("organization_id")
  userId         String            @map("user_id") @db.Uuid
  role           OrganizationRole  @default(MEMBER)
  createdAt      DateTime          @default(now()) @map("created_at")
  updatedAt      DateTime          @updatedAt @map("updated_at")

  organization   Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           UserProfile       @relation(fields: [userId], references: [userId], onDelete: Cascade)
  tenantMemberships TenantMember[]

  @@unique([organizationId, userId])
  @@unique([userId])
  @@index([organizationId])
  @@index([userId])
  @@map("organization_members")
  @@schema("core")
}

model OrganizationInvitation {
  id             String               @id @default(cuid())
  organizationId String               @map("organization_id")
  tenantId       String?              @map("tenant_id")
  email          String
  role           OrganizationRole     @default(MEMBER)
  status         InvitationStatus     @default(PENDING)
  tokenHash      String               @map("token_hash") @unique
  tokenHint      String?              @map("token_hint")
  issuedIp       String?              @map("issued_ip")
  acceptedIp     String?              @map("accepted_ip")
  acceptedAt     DateTime?            @map("accepted_at")
  invitedById    String               @map("invited_by_id") @db.Uuid
  productIds     String[]             @default([]) @map("product_ids")
  tenantRoles    TenantRole[]         @default([]) @map("tenant_roles")
  expiresAt      DateTime             @map("expires_at")
  createdAt      DateTime             @default(now()) @map("created_at")
  updatedAt      DateTime             @updatedAt @map("updated_at")

  organization   Organization         @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  tenant         Tenant?              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  invitedBy      UserProfile          @relation("InvitedBy", fields: [invitedById], references: [userId], onDelete: Cascade)

  @@index([organizationId])
  @@index([email])
  @@index([tenantId])
  @@map("organization_invitations")
  @@schema("core")
}

model Tenant {
  id             String           @id @default(cuid())
  organizationId String           @map("organization_id")
  slug           String?          @unique
  name           String
  description    String?
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")

  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  members        TenantMember[]
  applications   TenantApplication[]
  entitlements   ProductEntitlement[]
  auditEvents    AuditEvent[]
  invitations    OrganizationInvitation[]
  refreshTokens  RefreshToken[]
  usageEvents    BillingUsageEvent[]

  @@index([organizationId])
  @@map("tenants")
  @@schema("core")
}

model TenantMember {
  id                   String           @id @default(cuid())
  tenantId             String           @map("tenant_id")
  organizationMemberId String           @map("organization_member_id")
  role                 TenantRole       @default(MEMBER)
  createdAt            DateTime         @default(now()) @map("created_at")
  updatedAt            DateTime         @updatedAt @map("updated_at")

  tenant               Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  organizationMember   OrganizationMember @relation(fields: [organizationMemberId], references: [id], onDelete: Cascade)

  @@unique([tenantId, organizationMemberId])
  @@index([organizationMemberId])
  @@map("tenant_members")
  @@schema("core")
}

model TenantApplication {
  id          String                         @id @default(cuid())
  tenantId    String                         @map("tenant_id")
  productId   String                         @map("product_id")
  environment TenantApplicationEnvironment   @default(PRODUCTION)
  consentRequired Boolean                    @default(true) @map("consent_required")
  createdAt   DateTime                       @default(now()) @map("created_at")
  updatedAt   DateTime                       @updatedAt @map("updated_at")

  tenant      Tenant                         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  product     Product                        @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([tenantId, productId, environment])
  @@index([productId])
  @@map("tenant_applications")
  @@schema("core")
}

model Product {
  id                      String                 @id @default(cuid())
  slug                    String                 @unique
  name                    String
  description             String?
  clientId                String                 @unique @map("client_id")
  clientSecretHash        String                 @map("client_secret_hash")
  redirectUris            String[]               @default([]) @map("redirect_uris")
  postLogoutRedirectUris  String[]               @default([]) @map("post_logout_redirect_uris")
  scopes                  String[]               @default([])
  iconUrl                 String?                @map("icon_url")
  launcherUrl             String?                @map("launcher_url")
  createdAt               DateTime               @default(now()) @map("created_at")
  updatedAt               DateTime               @updatedAt @map("updated_at")

  entitlements            ProductEntitlement[]
  tenantApplications      TenantApplication[]
  refreshTokens           RefreshToken[]
  auditEvents             AuditEvent[]
  usageEvents             BillingUsageEvent[]

  @@map("products")
  @@schema("core")
}

model PortalRolePermission {
  id             String        @id @default(cuid())
  organizationId String        @map("organization_id")
  role           String
  permissions    String[]      @default([])
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @updatedAt @map("updated_at")

  organization   Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, role])
  @@map("portal_role_permissions")
  @@schema("core")
}

model ProductEntitlement {
  id             String         @id @default(cuid())
  organizationId String         @map("organization_id")
  tenantId       String         @map("tenant_id")
  productId      String         @map("product_id")
  userId         String         @map("user_id") @db.Uuid
  roles          ProductRole[]  @default([])
  expiresAt      DateTime?      @map("expires_at")
  createdAt      DateTime       @default(now()) @map("created_at")
  updatedAt      DateTime       @updatedAt @map("updated_at")

  organization   Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  tenant         Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  product        Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  user           UserProfile    @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@unique([userId, productId, tenantId])
  @@index([productId])
  @@index([tenantId])
  @@index([organizationId])
  @@map("product_entitlements")
  @@schema("core")
}

model RefreshToken {
  id           String      @id @default(cuid())
  tokenHash    String      @map("token_hash") @unique
  userId       String      @map("user_id") @db.Uuid
  clientId     String      @map("client_id")
  productId    String?     @map("product_id")
  tenantId     String?     @map("tenant_id")
  scope        String?     @map("scope")
  sessionId    String?     @map("session_id") @db.Uuid
  description  String?
  userAgent    String?     @map("user_agent")
  ipAddress    String?     @map("ip_address")
  expiresAt    DateTime    @map("expires_at")
  revokedAt    DateTime?   @map("revoked_at")
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")

  user         UserProfile @relation(fields: [userId], references: [userId], onDelete: Cascade)
  product      Product?    @relation(fields: [productId], references: [id], onDelete: SetNull)
  tenant       Tenant?     @relation(fields: [tenantId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([productId])
  @@index([tenantId])
  @@map("refresh_tokens")
  @@schema("core")
}

model AuthorizationCode {
  id                  String        @id @default(cuid())
  codeHash            String        @map("code_hash") @unique
  userId              String        @map("user_id") @db.Uuid
  clientId            String        @map("client_id")
  productId           String        @map("product_id")
  tenantId            String        @map("tenant_id")
  organizationId      String        @map("organization_id")
  redirectUri         String        @map("redirect_uri")
  scope               String
  codeChallenge       String        @map("code_challenge")
  codeChallengeMethod String        @map("code_challenge_method")
  sessionId           String?       @map("session_id") @db.Uuid
  nonce               String?
  roles               ProductRole[] @default([])
  email               String?
  expiresAt           DateTime      @map("expires_at")
  createdAt           DateTime      @default(now()) @map("created_at")

  @@index([expiresAt])
  @@map("authorization_codes")
  @@schema("core")
}

model AuditEvent {
  id             String          @id @default(cuid())
  eventType      AuditEventType  @map("event_type")
  description    String?
  actorUserId    String?         @map("actor_user_id") @db.Uuid
  organizationId String?         @map("organization_id")
  tenantId       String?         @map("tenant_id")
  productId      String?         @map("product_id")
  ipAddress      String?         @map("ip_address")
  userAgent      String?         @map("user_agent")
  metadata       Json?           @map("metadata")
  createdAt      DateTime        @default(now()) @map("created_at")

  organization   Organization?   @relation(fields: [organizationId], references: [id], onDelete: SetNull)
  tenant         Tenant?         @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  product        Product?        @relation(fields: [productId], references: [id], onDelete: SetNull)
  actor          UserProfile?    @relation("AuditActor", fields: [actorUserId], references: [userId], onDelete: SetNull)

  @@index([eventType])
  @@index([organizationId])
  @@index([tenantId])
  @@index([productId])
  @@index([actorUserId])
  @@map("audit_events")
  @@schema("core")
}

model SuperAdminBulkJob {
  id              String               @id @default(cuid())
  action          SuperAdminBulkAction
  status          SuperAdminBulkJobStatus @default(PENDING)
  userIds         String[]             @map("user_ids")
  reason          String?
  totalCount      Int                  @map("total_count")
  completedCount  Int                  @map("completed_count")
  failedCount     Int                  @map("failed_count")
  errorMessage    String?              @map("error_message")
  progressMessage String?              @map("progress_message")
  progressUpdatedAt DateTime?          @map("progress_updated_at")
  failureDetails  Json?                @map("failure_details")
  resultUrl       String?              @map("result_url")
  resultExpiresAt DateTime?            @map("result_expires_at")
  initiatedById   String               @map("initiated_by_id") @db.Uuid
  createdAt       DateTime             @default(now()) @map("created_at")
  updatedAt       DateTime             @updatedAt @map("updated_at")

  initiatedBy     UserProfile          @relation("BulkJobInitiator", fields: [initiatedById], references: [userId], onDelete: Cascade)

  @@index([initiatedById])
  @@map("super_admin_bulk_jobs")
  @@schema("core")
}

model SuperAdminImpersonationToken {
  id            String      @id @default(cuid())
  token         String      @unique
  userId        String      @map("user_id") @db.Uuid
  createdById   String      @map("created_by_id") @db.Uuid
  reason        String?
  productSlug   String?     @map("product_slug")
  expiresAt     DateTime    @map("expires_at")
  createdAt     DateTime    @default(now()) @map("created_at")

  user          UserProfile @relation("ImpersonationTarget", fields: [userId], references: [userId], onDelete: Cascade)
  createdBy     UserProfile @relation("ImpersonationCreator", fields: [createdById], references: [userId], onDelete: Cascade)

  @@index([userId])
  @@index([createdById])
  @@index([expiresAt])
  @@map("super_admin_impersonation_tokens")
  @@schema("core")
}

model SamlConnection {
  id                       String        @id @default(cuid())
  organizationId           String        @map("organization_id")
  slug                     String        @unique
  label                    String
  idpEntityId              String        @map("idp_entity_id")
  ssoUrl                   String        @map("sso_url")
  sloUrl                   String?       @map("slo_url")
  certificates             String[]              @map("certificates")
  metadataXml              String?       @map("metadata_xml")
  metadataUrl              String?       @map("metadata_url")
  acsUrl                   String        @map("acs_url")
  defaultRelayState        String?       @map("default_relay_state")
  enabled                  Boolean       @default(true)
  requireSignedAssertions  Boolean       @default(true) @map("require_signed_assertions")
  createdAt                DateTime      @default(now()) @map("created_at")
  updatedAt                DateTime      @updatedAt @map("updated_at")

  organization             Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  accounts                 SamlAccount[]

  @@index([organizationId])
  @@map("saml_connections")
  @@schema("core")
}

model SamlAccount {
  id                String         @id @default(cuid())
  samlConnectionId  String         @map("saml_connection_id")
  userId            String         @map("user_id") @db.Uuid
  nameId            String         @map("name_id")
  email             String
  attributes        Json?          @map("attributes")
  createdAt         DateTime       @default(now()) @map("created_at")
  updatedAt         DateTime       @updatedAt @map("updated_at")

  connection        SamlConnection @relation(fields: [samlConnectionId], references: [id], onDelete: Cascade)
  user              UserProfile    @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@unique([samlConnectionId, nameId])
  @@index([userId])
  @@map("saml_accounts")
  @@schema("core")
}

model BillingPackage {
  id              String                    @id @default(cuid())
  slug            String                    @unique
  name            String
  description     String?
  active          Boolean                   @default(true)
  currency        String                    @default("usd")
  interval        BillingInterval           @default(MONTHLY)
  amountCents     Int                       @map("amount_cents")
  trialPeriodDays Int?                      @map("trial_period_days")
  metadata        Json?
  featureLimits   BillingFeatureLimit[]
  subscriptions   BillingSubscription[]
  schedules       BillingSubscriptionSchedule[] @relation("BillingSchedulePackage")
  createdAt       DateTime                  @default(now()) @map("created_at")
  updatedAt       DateTime                  @updatedAt @map("updated_at")

  @@map("billing_packages")
  @@schema("core")
}

model BillingFeatureLimit {
  id           String                 @id @default(cuid())
  packageId    String                 @map("package_id")
  featureKey   String                 @map("feature_key")
  limitType    BillingLimitType       @map("limit_type")
  limitValue   Int?                   @map("limit_value")
  limitUnit    String?                @map("limit_unit")
  usagePeriod  BillingUsagePeriod?    @map("usage_period")
  metadata     Json?
  package      BillingPackage         @relation(fields: [packageId], references: [id], onDelete: Cascade)
  createdAt    DateTime               @default(now()) @map("created_at")
  updatedAt    DateTime               @updatedAt @map("updated_at")

  @@unique([packageId, featureKey])
  @@index([packageId])
  @@map("billing_feature_limits")
  @@schema("core")
}

model BillingSubscription {
  id                 String                        @id @default(cuid())
  organizationId     String                        @map("organization_id")
  packageId          String                        @map("package_id")
  status             BillingSubscriptionStatus     @default(ACTIVE)
  currency           String                        @default("usd")
  amountCents        Int                           @map("amount_cents")
  billingInterval    BillingInterval               @map("billing_interval")
  currentPeriodStart DateTime                      @map("current_period_start")
  currentPeriodEnd   DateTime                      @map("current_period_end")
  trialEndsAt        DateTime?                     @map("trial_ends_at")
  cancelAtPeriodEnd  Boolean                       @default(false) @map("cancel_at_period_end")
  canceledAt         DateTime?                     @map("canceled_at")
  externalId         String?                       @map("external_id") @unique
  metadata           Json?
  organization       Organization                  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  package            BillingPackage                @relation(fields: [packageId], references: [id], onDelete: Restrict)
  schedules          BillingSubscriptionSchedule[]
  usageEvents        BillingUsageEvent[]
  usageAggregates    BillingUsageAggregate[]
  invoices           BillingInvoice[]
  createdAt          DateTime                      @default(now()) @map("created_at")
  updatedAt          DateTime                      @updatedAt @map("updated_at")

  @@index([organizationId])
  @@index([packageId])
  @@map("billing_subscriptions")
  @@schema("core")
}

model BillingSubscriptionSchedule {
  id              String                              @id @default(cuid())
  subscriptionId  String                              @map("subscription_id")
  targetPackageId String                              @map("target_package_id")
  status          BillingSubscriptionScheduleStatus   @default(PENDING)
  effectiveAt     DateTime                            @map("effective_at")
  metadata        Json?
  subscription    BillingSubscription                 @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  targetPackage   BillingPackage                      @relation("BillingSchedulePackage", fields: [targetPackageId], references: [id], onDelete: Restrict)
  createdAt       DateTime                            @default(now()) @map("created_at")
  updatedAt       DateTime                            @updatedAt @map("updated_at")

  @@index([subscriptionId])
  @@index([targetPackageId])
  @@map("billing_subscription_schedules")
  @@schema("core")
}

model BillingUsageEvent {
  id             String                 @id @default(cuid())
  organizationId String                 @map("organization_id")
  tenantId       String?                @map("tenant_id")
  subscriptionId String?                @map("subscription_id")
  productId      String?                @map("product_id")
  featureKey     String                 @map("feature_key")
  quantity       Decimal                @db.Decimal(20, 6)
  unit           String                 @map("unit")
  recordedAt     DateTime               @map("recorded_at")
  source         BillingUsageSource     @map("source")
  fingerprint    String                 @map("fingerprint") @unique
  metadata       Json?
  organization   Organization           @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  tenant         Tenant?                @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  subscription   BillingSubscription?   @relation(fields: [subscriptionId], references: [id], onDelete: SetNull)
  product        Product?               @relation(fields: [productId], references: [id], onDelete: SetNull)
  createdAt      DateTime               @default(now()) @map("created_at")

  @@index([organizationId, featureKey, recordedAt])
  @@index([subscriptionId])
  @@index([tenantId])
  @@map("billing_usage_events")
  @@schema("core")
}

model BillingUsageAggregate {
  id             String                 @id @default(cuid())
  organizationId String                 @map("organization_id")
  subscriptionId String?                @map("subscription_id")
  featureKey     String                 @map("feature_key")
  periodStart    DateTime               @map("period_start")
  periodEnd      DateTime               @map("period_end")
  resolution     BillingUsageResolution @map("resolution")
  quantity       Decimal                @db.Decimal(20, 6)
  unit           String                 @map("unit")
  source         BillingUsageSource     @map("source")
  organization   Organization           @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  subscription   BillingSubscription?   @relation(fields: [subscriptionId], references: [id], onDelete: SetNull)
  createdAt      DateTime               @default(now()) @map("created_at")
  updatedAt      DateTime               @updatedAt @map("updated_at")

  @@index([organizationId, featureKey, resolution, periodStart])
  @@index([subscriptionId])
  @@unique([organizationId, subscriptionId, featureKey, resolution, periodStart, periodEnd])
  @@map("billing_usage_aggregates")
  @@schema("core")
}

model BillingContact {
  id             String             @id @default(cuid())
  organizationId String             @map("organization_id")
  name           String
  email          String
  role           BillingContactRole @map("role")
  phone          String?            @map("phone")
  metadata       Json?
  organization   Organization       @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdAt      DateTime           @default(now()) @map("created_at")
  updatedAt      DateTime           @updatedAt @map("updated_at")

  @@index([organizationId])
  @@map("billing_contacts")
  @@schema("core")
}

model BillingTaxId {
  id             String       @id @default(cuid())
  organizationId String       @map("organization_id")
  type           String
  value          String
  country        String?
  verified       Boolean      @default(false)
  metadata       Json?
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @updatedAt @map("updated_at")

  @@index([organizationId])
  @@map("billing_tax_ids")
  @@schema("core")
}

model BillingInvoice {
  id             String               @id @default(cuid())
  organizationId String               @map("organization_id")
  subscriptionId String?              @map("subscription_id")
  number         String               @unique
  status         BillingInvoiceStatus @map("status")
  currency       String               @default("usd")
  subtotalCents  Int                  @map("subtotal_cents")
  taxCents       Int                  @map("tax_cents")
  totalCents     Int                  @map("total_cents")
  balanceCents   Int                  @map("balance_cents")
  dueAt          DateTime?            @map("due_at")
  issuedAt       DateTime             @map("issued_at")
  paidAt         DateTime?            @map("paid_at")
  voidedAt       DateTime?            @map("voided_at")
  externalId     String?              @map("external_id") @unique
  metadata       Json?
  organization   Organization         @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  subscription   BillingSubscription? @relation(fields: [subscriptionId], references: [id], onDelete: SetNull)
  lines          BillingInvoiceLine[]
  credits        BillingCreditMemo[]
  createdAt      DateTime             @default(now()) @map("created_at")
  updatedAt      DateTime             @updatedAt @map("updated_at")

  @@index([organizationId])
  @@index([subscriptionId])
  @@map("billing_invoices")
  @@schema("core")
}

model BillingInvoiceLine {
  id               String                    @id @default(cuid())
  invoiceId        String                    @map("invoice_id")
  lineType         BillingInvoiceLineType    @map("line_type")
  description      String?
  featureKey       String?                   @map("feature_key")
  quantity         Decimal                   @db.Decimal(20, 6)
  unitAmountCents  Int                       @map("unit_amount_cents")
  amountCents      Int                       @map("amount_cents")
  usagePeriodStart DateTime?                 @map("usage_period_start")
  usagePeriodEnd   DateTime?                 @map("usage_period_end")
  metadata         Json?
  invoice          BillingInvoice            @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  createdAt        DateTime                  @default(now()) @map("created_at")
  updatedAt        DateTime                  @updatedAt @map("updated_at")

  @@index([invoiceId])
  @@map("billing_invoice_lines")
  @@schema("core")
}

model BillingPaymentMethod {
  id             String                      @id @default(cuid())
  organizationId String                      @map("organization_id")
  type           BillingPaymentMethodType    @map("type")
  status         BillingPaymentMethodStatus  @map("status") @default(ACTIVE)
  providerId     String                      @map("provider_id")
  reference      String?                     @map("reference")
  brand          String?                     @map("brand")
  last4          String?                     @map("last4")
  expMonth       Int?                        @map("exp_month")
  expYear        Int?                        @map("exp_year")
  isDefault      Boolean                     @default(false) @map("is_default")
  metadata       Json?
  organization   Organization                @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdAt      DateTime                    @default(now()) @map("created_at")
  updatedAt      DateTime                    @updatedAt @map("updated_at")

  @@index([organizationId])
  @@unique([organizationId, providerId])
  @@map("billing_payment_methods")
  @@schema("core")
}

model BillingCreditMemo {
  id             String                @id @default(cuid())
  organizationId String                @map("organization_id")
  invoiceId      String?               @map("invoice_id")
  amountCents    Int                   @map("amount_cents")
  currency       String                @default("usd")
  reason         BillingCreditReason   @map("reason")
  expiresAt      DateTime?             @map("expires_at")
  metadata       Json?
  organization   Organization          @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  invoice        BillingInvoice?       @relation(fields: [invoiceId], references: [id], onDelete: SetNull)
  createdAt      DateTime              @default(now()) @map("created_at")
  updatedAt      DateTime              @updatedAt @map("updated_at")

  @@index([organizationId])
  @@index([invoiceId])
  @@map("billing_credit_memos")
  @@schema("core")
}

enum OrganizationRole {
  OWNER
  ADMIN
  MEMBER

  @@schema("core")
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REVOKED
  EXPIRED

  @@schema("core")
}

enum TenantRole {
  ADMIN
  MEMBER

  @@schema("core")
}

enum TenantApplicationEnvironment {
  PRODUCTION
  STAGING
  DEVELOPMENT

  @@schema("core")
}

enum ProductRole {
  OWNER
  ADMIN
  EDITOR
  VIEWER
  ANALYST
  CONTRIBUTOR
  MEMBER

  @@schema("core")
}

enum UserLifecycleStatus {
  ACTIVE
  INVITED
  SUSPENDED
  DEACTIVATED

  @@schema("core")
}

enum AuditEventType {
  SIGN_IN
  SIGN_OUT
  TOKEN_ISSUED
  TOKEN_REFRESHED
  TOKEN_REVOKED
  ENTITLEMENT_GRANTED
  ENTITLEMENT_REVOKED
  ADMIN_ACTION
  MFA_ENROLLED
  MFA_DISABLED
  ORGANIZATION_UPDATED
  TENANT_CREATED
  TENANT_UPDATED
  PRODUCT_REGISTERED
  IMPERSONATION_STARTED
  IMPERSONATION_STOPPED
  BULK_JOB_QUEUED
  BULK_JOB_RETRIED
  BULK_JOB_PROGRESS
  BULK_JOB_COMPLETED
  BULK_JOB_CANCELLED
  BULK_JOB_SUCCEEDED
  BULK_JOB_FAILED

  @@schema("core")
}

enum SuperAdminBulkAction {
  ACTIVATE_USERS
  SUSPEND_USERS
  EXPORT_USERS

  @@schema("core")
}

enum SuperAdminBulkJobStatus {
  PENDING
  RUNNING
  SUCCEEDED
  FAILED

  @@schema("core")
}

enum BillingInterval {
  MONTHLY
  YEARLY

  @@schema("core")
}

enum BillingLimitType {
  HARD
  SOFT
  UNLIMITED

  @@schema("core")
}

enum BillingUsagePeriod {
  DAILY
  WEEKLY
  MONTHLY
  ANNUAL
  LIFETIME

  @@schema("core")
}

enum BillingSubscriptionStatus {
  TRIALING
  ACTIVE
  PAST_DUE
  CANCELED
  INCOMPLETE
  INCOMPLETE_EXPIRED

  @@schema("core")
}

enum BillingSubscriptionScheduleStatus {
  PENDING
  SCHEDULED
  COMPLETED
  CANCELED

  @@schema("core")
}

enum BillingUsageSource {
  PORTAL
  TASKS
  ADMIN
  WORKER
  API

  @@schema("core")
}

enum BillingUsageResolution {
  HOURLY
  DAILY
  WEEKLY
  MONTHLY

  @@schema("core")
}

enum BillingInvoiceStatus {
  DRAFT
  OPEN
  PAID
  VOID
  UNCOLLECTIBLE

  @@schema("core")
}

enum BillingInvoiceLineType {
  RECURRING
  USAGE
  ONE_TIME
  CREDIT
  TAX
  ADJUSTMENT

  @@schema("core")
}

enum BillingPaymentMethodType {
  CARD
  BANK_ACCOUNT
  EXTERNAL

  @@schema("core")
}

enum BillingPaymentMethodStatus {
  ACTIVE
  INACTIVE

  @@schema("core")
}

enum BillingCreditReason {
  ADJUSTMENT
  REFUND
  PROMOTION
  SERVICE_FAILURE
  OTHER

  @@schema("core")
}

enum BillingContactRole {
  primary
  finance
  technical
  legal

  @@schema("core")
}
