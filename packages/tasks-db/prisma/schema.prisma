generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
  output          = "../generated/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("TASKS_DATABASE_URL")
  directUrl = env("TASKS_DATABASE_DIRECT_URL")
  schemas   = ["tasks"]
}

model Task {
  id             String     @id @default(cuid())
  organizationId String     @map("organization_id")
  tenantId       String     @map("tenant_id")
  projectId      String?    @map("project_id")
  title          String
  description    String?
  status         TaskStatus @default(OPEN)
  priority       TaskPriority @default(MEDIUM)
  sortOrder      Int         @map("sort_order") @default(0)
  visibility    TaskVisibility @default(PROJECT)
  assignedToId   String?    @map("assigned_to_id") @db.Uuid
  createdById    String     @map("created_by_id") @db.Uuid
  dueDate        DateTime?  @map("due_date")
  completedAt    DateTime?  @map("completed_at")
  createdAt      DateTime   @default(now()) @map("created_at")
  updatedAt      DateTime   @updatedAt @map("updated_at")
  project        Project?   @relation(fields: [projectId], references: [id], onDelete: SetNull)
  subtasks       TaskSubtask[]
  comments       TaskComment[]
  followers      TaskFollower[]

  @@index([tenantId])
  @@index([tenantId, projectId])
  @@index([organizationId])
  @@index([assignedToId])
  @@map("tasks")
  @@schema("tasks")
}

enum TaskStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  ARCHIVED

  @@schema("tasks")
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL

  @@schema("tasks")
}

enum TaskVisibility {
  PERSONAL
  PROJECT

  @@schema("tasks")
}

model Project {
  id             String   @id @default(cuid())
  organizationId String   @map("organization_id")
  tenantId       String   @map("tenant_id")
  name           String
  description    String?
  color          String?  @db.VarChar(16)
  createdById    String   @map("created_by_id") @db.Uuid
  archivedAt     DateTime? @map("archived_at")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  tasks          Task[]
  permissionPolicies TaskPermissionPolicy[]

  @@index([tenantId])
  @@index([organizationId])
  @@unique([tenantId, name])
  @@map("projects")
  @@schema("tasks")
}

model TaskSubtask {
  id             String    @id @default(cuid())
  taskId         String    @map("task_id")
  organizationId String    @map("organization_id")
  tenantId       String    @map("tenant_id")
  title          String
  isCompleted    Boolean   @default(false) @map("is_completed")
  createdById    String    @map("created_by_id") @db.Uuid
  completedAt    DateTime? @map("completed_at")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")
  task           Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@index([tenantId])
  @@map("task_subtasks")
  @@schema("tasks")
}

model TaskComment {
  id             String   @id @default(cuid())
  taskId         String   @map("task_id")
  organizationId String   @map("organization_id")
  tenantId       String   @map("tenant_id")
  body           String
  createdById    String   @map("created_by_id") @db.Uuid
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  task           Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@index([tenantId])
  @@map("task_comments")
  @@schema("tasks")
}

model TaskFollower {
  taskId         String    @map("task_id")
  userId         String    @map("user_id") @db.Uuid
  organizationId String    @map("organization_id")
  tenantId       String    @map("tenant_id")
  createdAt      DateTime  @default(now()) @map("created_at")
  task           Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@id([taskId, userId])
  @@index([tenantId])
  @@map("task_followers")
  @@schema("tasks")
}

model TaskPermissionPolicy {
  id          String   @id @default(cuid())
  tenantId    String   @map("tenant_id")
  projectId   String?  @map("project_id")
  userId      String   @map("user_id") @db.Uuid
  canManage   Boolean  @default(false) @map("can_manage")
  canEdit     Boolean  @default(false) @map("can_edit")
  canComment  Boolean  @default(true) @map("can_comment")
  canAssign   Boolean  @default(false) @map("can_assign")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  project     Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([tenantId, projectId, userId])
  @@map("task_permission_policies")
  @@schema("tasks")
}
